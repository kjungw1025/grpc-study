buildscript {
	ext {
		protobufVersion = '4.27.2'
		protobufPluginVersion = '0.9.4'
		grpcVersion = '1.70.0'
	}
}

plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.8'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'com.google.protobuf' version "${protobufPluginVersion}"
}

group = 'grpc'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	// spring boot
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	// mysql
	runtimeOnly 'com.mysql:mysql-connector-j'

	// lombok
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	// grpc 프로토콜 버터를 사용하기 위한 핵심 라이브러리 (Protobuf 메시지의 직렬화 및 역직렬화를 지원)
	implementation "com.google.protobuf:protobuf-java-util:${protobufVersion}"
	implementation "com.google.protobuf:protobuf-java:${protobufVersion}"

	// grpc 서버, 클라이언트 설정
	implementation 'net.devh:grpc-spring-boot-starter:3.1.0.RELEASE' // Spring Boot와 gRPC의 통합을 간편하게 도와주는 스타터
	implementation "io.grpc:grpc-netty-shaded:${grpcVersion}" // gRPC 서버와 클라이언트의 Netty 전송 계층을 제공
	implementation "io.grpc:grpc-protobuf:${grpcVersion}"     // Protobuf 메시지와 gRPC의 통합을 지원
	implementation "io.grpc:grpc-stub:${grpcVersion}"         // gRPC 클라이언트 스텁을 생성
	compileOnly 'org.apache.tomcat:annotations-api:6.0.53'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

protobuf {
	// Protobuf 컴파일러를 지정하여 .proto 파일을 컴파일
	protoc {
		artifact = "com.google.protobuf:protoc:${protobufVersion}"
	}
	// 생성된 파일을 정리
	clean {
		delete generatedFilesBaseDir
	}
	// gRPC 플러그인을 설정하여 Protobuf 파일로부터 gRPC 관련 코드를 생성
	plugins {
		grpc {
			artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
		}
	}
	// 모든 프로토콜 버퍼 작업에 대해 gRPC 플러그인을 적용
	generateProtoTasks {
		all()*.plugins {
			grpc {}
		}
	}
}

tasks.named('test') {
	useJUnitPlatform()
}
